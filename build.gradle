plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'war'
}

// WAR 패키징을 위한 설정
bootWar {
//    archiveBaseName = 'ROOT'
//    archiveFileName = 'ROOT.war'
//    archiveVersion = ''
    enabled = false
}
war {
    enabled = true
    archiveBaseName = 'ROOT'
    archiveVersion = ''
    archiveFileName = 'ROOT.war'
}


configurations {
    providedRuntime
}

group = 'com.cloud'
version = '0.0.1-SNAPSHOT'
description = 'cloud-project'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat' // 중복 방지[web:123]
    }
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.5'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    providedRuntime 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    providedRuntime('org.apache.tomcat.embed:tomcat-embed-jasper') {
        // 불필요 전이 제거 예시
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    runtimeOnly 'com.mysql:mysql-connector-j'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.processResources {
    exclude '**/*.map', '**/*.psd', '**/*.orig', '**/*.bak'
    exclude '**/docs/**', '**/examples/**', '**/samples/**'
}

tasks.register('printWarSize') {
    doLast {
        def war = file("$buildDir/libs/ROOT.war")
        if (war.exists()) println "WAR size: ${war.length() / 1024 / 1024} MB"
    }
}